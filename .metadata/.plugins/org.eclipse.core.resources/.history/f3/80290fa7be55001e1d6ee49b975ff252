package controller.gerente;

import javafx.fxml.FXML;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import model.dao.Gerente.RelatorioABCDao;

import java.sql.SQLException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import controller.Ferramentas.DetalhesLucro;
import controller.Ferramentas.Produto;

public class RelatorioABCController {

    @FXML
    private TableColumn<Produto, String> ProdutoColumn;

    @FXML
    private TableColumn<Produto, Double> FaturamentoColumn;

    @FXML
    private TableColumn<Produto, String> CurvaColumn;

    @FXML
    private TextField TxtPesquisa;

    @FXML
    private TableView<Produto> tableView;

    private List<Produto> produtos; 
    private List<DetalhesLucro> detalhesLucro; 
    @FXML
    void initialize() {
        try {
            // Inicialize a lista de detalhes de lucro com dados do banco de dados
            detalhesLucro = RelatorioABCDao.inicializaTabelaDetalhesLucro();

            // Suponha que você já tenha inicializado a lista 'produtos' com seus dados
            if (produtos != null && !produtos.isEmpty()) {
            // Ordenar os produtos por faturamento decrescente
            Collections.sort(produtos, Comparator.comparingDouble(Produto::getFaturamento).reversed());

            // Calcular o faturamento total
            double faturamentoTotal = produtos.stream().mapToDouble(Produto::getFaturamento).sum();

            // Calcular as porcentagens de faturamento acumulado
            double faturamentoAcumulado = 0.0;
            for (Produto produto : produtos) {
                double porcentagem = (produto.getFaturamento() / faturamentoTotal) * 100;
                faturamentoAcumulado += porcentagem;
                produto.setPorcentagem(faturamentoAcumulado);
            }

            // Atribuir curvas A, B e C com base em critérios definidos
            atribuirCurvasABC(produtos);

            // Preencher a tabela com os produtos (você precisará adaptar isso à sua TableView)
            tableView.getItems().addAll(produtos);
            
            } else {
                // Lida com a situação em que a lista de produtos está vazia ou nula
            }
            
            
            
        } catch (SQLException e) {
            e.printStackTrace();
            // Trate a exceção adequadamente (exibir mensagem de erro, registrar logs, etc.)
        }
    }

    private void atribuirCurvasABC(List<Produto> produtos) {
        // Implemente os critérios para atribuir os produtos às curvas A, B e C aqui
        // Por exemplo, atribua os 20% superiores à curva A, os 30% seguintes à curva B e o restante à curva C
    }
    
    
    
    

    @FXML
    void EfeitoFiltro(MouseEvent event) {

    }

    @FXML
    void EfeitoImprimir(MouseEvent event) {

    }

    @FXML
    void Filtro(MouseEvent event) {

    }

    @FXML
    void Pesquisar(MouseEvent event) {

    }

    @FXML
    void PressionarEnter(KeyEvent event) {

    }

    @FXML
    void SairFiltro(MouseEvent event) {

    }

    @FXML
    void SairImprimir(MouseEvent event) {

    }

    @FXML
    void imprimir(MouseEvent event) {

    }

    @FXML
    void vol1(MouseEvent event) {

    }

}
